
name: Version Check

permissions:
  issues: write
  pull-requests: write

on:
  pull_request:
    types: [opened, synchronize, ready_for_review]
    paths:
      - 'light_s3_client/**'
      - 'setup.py'
      - 'pyproject.toml'

jobs:
  check_version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check version increment
        id: version_check
        run: |
          # Get version from current PR
          PR_VERSION=$(grep -o "__version__.*" light_s3_client/version.py | awk '{print $3}' | tr -d "'\"")
          PR_VERSION_TOML=$(grep -E '^version\s*=\s*".*"' pyproject.toml | awk -F '"' '{print $2}')
          echo "PR_VERSION=$PR_VERSION" >> $GITHUB_ENV
          echo "PR_VERSION_TOML=$PR_VERSION_TOML" >> $GITHUB_ENV
          # Get version from main branch
          git checkout origin/main
          MAIN_VERSION=$(grep -o "__version__.*" light_s3_client/version.py | awk '{print $3}' | tr -d "'\"")
          MAIN_VERSION_TOML=$(grep -E '^version\s*=\s*".*"' pyproject.toml | awk -F '"' '{print $2}')
          echo "MAIN_VERSION=$MAIN_VERSION" >> $GITHUB_ENV
          echo "MAIN_VERSION_TOML=$MAIN_VERSION_TOML" >> $GITHUB_ENV
          # Compare versions using Python
          python3 -c "from packaging import version; pr_ver = version.parse('${PR_VERSION}'); pr_ver_toml = version.parse('${PR_VERSION_TOML}'); main_ver = version.parse('${MAIN_VERSION}'); main_ver_toml = version.parse('${MAIN_VERSION_TOML}');\nif pr_ver != pr_ver_toml: print(f'❌ version.py and pyproject.toml are out of sync: {pr_ver} != {pr_ver_toml}'); exit(1);\nif pr_ver <= main_ver or pr_ver_toml <= main_ver_toml: print(f'❌ Version must be incremented! Main: {main_ver}/{main_ver_toml}, PR: {pr_ver}/{pr_ver_toml}'); exit(1);\nprint(f'✅ Version properly incremented from {main_ver}/{main_ver_toml} to {pr_ver}/{pr_ver_toml}')"
      - name: Manage PR Comment
        uses: actions/github-script@v7
        if: always()
        env:
          MAIN_VERSION: ${{ env.MAIN_VERSION }}
          PR_VERSION: ${{ env.PR_VERSION }}
          CHECK_RESULT: ${{ steps.version_check.outcome }}
        with:
          script: |
            const success = process.env.CHECK_RESULT === 'success';
            const prNumber = context.payload.pull_request.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const comments = await github.rest.issues.listComments({
              owner: owner,
              repo: repo,
              issue_number: prNumber,
            });
            const versionComment = comments.data.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('Version Check')
            );
            if (versionComment) {
              if (success) {
                await github.rest.issues.deleteComment({
                  owner: owner,
                  repo: repo,
                  comment_id: versionComment.id,
                });
              } else {
                await github.rest.issues.updateComment({
                  owner: owner,
                  repo: repo,
                  comment_id: versionComment.id,
                  body: `❌ Version Check Failed\nMain: ${process.env.MAIN_VERSION}\nPR: ${process.env.PR_VERSION}`,
                });
              }
            } else if (!success) {
              await github.rest.issues.createComment({
                owner: owner,
                repo: repo,
                issue_number: prNumber,
                body: `❌ Version Check Failed\nMain: ${process.env.MAIN_VERSION}\nPR: ${process.env.PR_VERSION}`,
              });
            }
